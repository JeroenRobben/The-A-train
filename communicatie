/*
  Copyright (c) 2015 Johannes Verherstraeten

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ 

// Included: communication with MOTOR, communication with COMFORT
// Half included: state of emergency
// Not included: communication with CCE

#include <Wire.h>

// Pin definitions: 
int PIN_IR_DECODER_VT = 1;
int PIN_IR_DECODER_D1 = 10;                           // most significant bit
int PIN_IR_DECODER_D2 = 11;
int PIN_IR_DECODER_D3 = 8;
int PIN_IR_DECODER_D4 = A0;                           // least significant bit
int PIN_EMERGENCY_MOTOR = 0;
int PIN_EMERGENCY_COMMUNICATION = 7; 

// IR interrupt variables:                            // Values that can be changed in an interrupt function must be declared as volatile.
volatile boolean ir_decoder_d1;                       // binary decoder readings.
volatile boolean ir_decoder_d2;
volatile boolean ir_decoder_d3;
volatile boolean ir_decoder_d4;
volatile byte current_location;                       // contains current location type byte.                START VALUE NEEDED!!
volatile byte beacon;                                 // contains last passed beacon number.
volatile byte beacon_type;                            // contains last passed beacon type. 
volatile int beacon_ticks = 0;                        // prevents multiple registration of one beacon. A beacon will only be registered when beacon_ticks is back at zero.
volatile boolean location_change = false;             // true if the location type is changed.

// Other control variables:
float TERMINAL_ARRIVING_TIME = 3000;                   // time in milliseconds between passing a terminal beacon and stopping the train.
float TERMINAL_INTERNATIONAL_ARRIVING_TIME = 3000;     // time in milliseconds between passing a terminal beacon and stopping the train.
float TIME_TO_OPEN_DOORS = 1500;                       // time in milliseconds between stopping the train and opening the doors. 
float TIME_TO_CLOSE_DOORS = 1500;                      // time in milliseconds between closing the doors and departure. 
float terminal_waiting_time = 20000;                   // time in milliseconds. The time the train must wait in a normal terminal.
float terminal_international_waiting_time = 40000;     // time in milliseconds. The time the train must wait in an international terminal.
unsigned long terminal_beacon_passed_time;                // time in milliseconds since Arduino startup. The time of the last terminal beacon passing is saved.
unsigned long arrival_time;                               // time in milliseconds since Arduino startup. The time when the train stops at the terminal.
unsigned long doors_opening_time;                         // time in milliseconds since Arduino startup. The time when the doors open in the terminal.
unsigned long doors_closing_time;                         // time in milliseconds since Arduino startup. The time when the doors close in the terminal.
unsigned long departure_time;                             // time in milliseconds since Arduino startup. The time of departure.
unsigned long emergency_situation_start_time;             // time in milliseconds since Arduino startup. The time when the last emergency situation started.
unsigned long emergency_situation_duration;               // time in milliseconds. The duration of the last emergency situation.
unsigned long current_time;                               // time in milliseconds since Arduino startup. The time measured at that moment.
boolean doors_opened = false;
boolean emergency_situation = false;

// Loop timing variables: 
unsigned long last_loop_time;                          // time in milliseconds of last loop.
unsigned long loop_start_time;                         // time in milliseconds since Arduino startup. The starting time of the last loop.

// Location types: 
byte STRAIGHT_TRACK = 0;
byte TERMINAL = 1;
byte TERMINAL_INTERNATIONAL = 2;
byte TRACK_TURN = 3;
byte TRACK_SWITCH = 4; 
byte TERMINAL_ARRIVAL = 5;
byte TERMINAL_INTERNATIONAL_ARRIVAL = 6;
byte TERMINAL_DEPARTURE = 7;
byte TERMINAL_INTERNATIONAL_DEPARTURE = 8;

// I2C adresses:
byte MOTOR_ADRESS = 2;
byte COMFORT_ADRESS = 3;

// Motor speed & direction
boolean motor_speed_direction;                         // 0=forward, 1=backward.                                 START VALUE NEEDED!!
byte motor_power;                                      // value between 0 and 255.
boolean FORWARD = 0;
boolean BACKWARD = 1;
byte FULL_SPEED = 255;
byte HALF_SPEED = 128;
byte SLOW_SPEED = 64;
byte STOP = 0; 

// Beacon number -> beacon type array
// Each beacon can have a number from 0 to 15 so CCE can track our location. But we need to know the type of 
// location this beacon marks. The value at the index of the beacon number represents the location type. 
 volatile byte beacon_number_to_type[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};


// ================================================================
// ===                      INITIAL SETUP                       ===
// ================================================================

void setup() {

  Serial.begin(115200);                                                                      // start serial communication with pc, baudrate: 115200.
  while (!Serial);
  
  Wire.begin();                                                                              // join i2c bus for communication with MOTOR and COMFORT (address optional for master).
    
  pinMode(PIN_IR_DECODER_VT, INPUT);
  pinMode(PIN_IR_DECODER_D1, INPUT);
  pinMode(PIN_IR_DECODER_D2, INPUT);
  pinMode(PIN_IR_DECODER_D3, INPUT);
  pinMode(PIN_IR_DECODER_D4, INPUT);
  pinMode(PIN_EMERGENCY_MOTOR, INPUT);
  pinMode(PIN_EMERGENCY_COMMUNICATION, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(PIN_IR_DECODER_VT), decoder_interrupt, RISING);      // call decoder interrupt function when VT pin goes high.
  
  attachInterrupt(digitalPinToInterrupt(PIN_EMERGENCY_MOTOR), emergency_interrupt, RISING);  // call emergency interrupt function when motor emergency pin goes high.
  
  current_location = STRAIGHT_TRACK;                                                         // start position and direction: 
  motor_speed_direction = FORWARD;
  location_change = true; 
  loop_start_time = millis();
  }


// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================
// The main program loop is optimized for running-through as fast as possible. (almost no delays etc...)
// This means we can listen almost continuously for messages from CCE and react as quickly as possible.
void loop() {
  
  if (emergency_situation == true) {
    emergency_situation_start_time = millis();
    Serial.println("Emergency situation!");
    Serial.println("...Send any character to end emergency situation");
    while (Serial.available() && Serial.read());                                         // empty serial buffer.
    while (!Serial.available()) {                                                        // wait for serial input.
      delay(1000);
      }
    while (Serial.available() && Serial.read());                                         // empty buffer again.
    Serial.println("Emergency situation ended"); 
    if (current_location == TERMINAL_ARRIVAL || current_location == TERMINAL_INTERNATIONAL_ARRIVAL) {
      emergency_situation_duration = millis() - emergency_situation_start_time;
      }
    }
  
  
  if (location_change) {                                                                 // things that happen when location type changes. The code is pretty obvious.
    Serial.print("Location change. Current location: ");
    Serial.println(current_location);
    if (current_location == STRAIGHT_TRACK) {
      motor_power = HALF_SPEED;
      }
    else if (current_location == TRACK_TURN || current_location == TRACK_SWITCH) {
      motor_power = SLOW_SPEED; 
      }
    else if (current_location == TERMINAL_ARRIVAL || current_location == TERMINAL_INTERNATIONAL_ARRIVAL) {
      motor_power = SLOW_SPEED;
      send_comfort_arrival();
      emergency_situation_duration = 0;
      terminal_beacon_passed_time = millis();
      }
    else if (current_location == TERMINAL) {
      motor_power = STOP;
      motor_speed_direction = !motor_speed_direction;
      arrival_time = millis();
      doors_opening_time = arrival_time + TIME_TO_OPEN_DOORS; 
      }
    else if (current_location == TERMINAL_INTERNATIONAL) {
      motor_power = STOP;
      arrival_time = millis();
      doors_opening_time = arrival_time + TIME_TO_OPEN_DOORS; 
      }
    else if (current_location == TERMINAL_DEPARTURE || current_location == TERMINAL_INTERNATIONAL_DEPARTURE) {
      motor_power = SLOW_SPEED;
      }
    send_motor_speed();
    location_change = false;
    }
  
                                                                                         
  else if (current_location == TERMINAL_ARRIVAL) {
    current_time = millis();
    if (current_time > terminal_beacon_passed_time +                         // after the arriving time has passed, the train stops.
                       TERMINAL_ARRIVING_TIME + 
                       emergency_situation_duration) {    
      location_change == true;      
      current_location == TERMINAL; 
      }
    }
  else if (current_location == TERMINAL_INTERNATIONAL_ARRIVAL) {
    current_time = millis();
    if (current_time > terminal_beacon_passed_time +                         // after the arriving time has passed, the train stops.
                       TERMINAL_INTERNATIONAL_ARRIVING_TIME + 
                       emergency_situation_duration) {    
      location_change == true;      
      current_location == TERMINAL_INTERNATIONAL; 
      }
    }  
    
  else if (current_location == TERMINAL) {   
    current_time = millis();
    if ((departure_time > arrival_time) && (current_time > departure_time)  && (doors_opened == false)) {               // If departure_time is already updated and exceeded and the doors are closed: depart. 
      Serial.println("Departure");
      location_change = true;
      current_location == TERMINAL_DEPARTURE;
      }
    else if ((doors_closing_time > arrival_time) && (current_time > doors_closing_time) && (doors_opened == true)) {    // If door_closing_time is already updated and exceeded and the doors are still open: close doors.
      Serial.println("Close doors");
      send_comfort_close_doors(); 
      doors_opened = false;
      departure_time = current_time + TIME_TO_CLOSE_DOORS;                                                              // and update departure_time.
      }
    else if (current_time > doors_opening_time && doors_opened == false) {                 // If the doors_opening_time is exceeded and the doors are still closed: open doors.
      Serial.println("Open doors");
      send_comfort_open_doors();
      doors_opened = true;
      doors_closing_time = current_time + terminal_waiting_time;                           // and update doors_closing_time.
      }
    else {
      delay(10);
      }
    }    
  else if (current_location == TERMINAL_INTERNATIONAL) {
    current_time = millis();
    if ((departure_time > arrival_time) && (current_time > departure_time)  && (doors_opened == false)) {               // If departure_time is already updated and exceeded and the doors are closed: depart. 
      Serial.println("Departure");
      location_change = true;
      current_location == TERMINAL_INTERNATIONAL_DEPARTURE;
      }
    else if ((doors_closing_time > arrival_time) && (current_time > doors_closing_time) && (doors_opened == true)) {    // If door_closing_time is already updated and exceeded and the doors are still open: close doors.
      Serial.println("Close doors");
      send_comfort_close_doors(); 
      doors_opened = false;
      departure_time = current_time + TIME_TO_CLOSE_DOORS;                                                              // and update departure_time.
      }
    else if (current_time > doors_opening_time && doors_opened == false) {              // If the doors_opening_time is exceeded and the doors are still closed: open doors.
      Serial.println("Open doors");
      send_comfort_open_doors();
      doors_opened = true;
      doors_closing_time = current_time + terminal_international_waiting_time;          // and update doors_closing_time.
      }
    else {
      delay(10);
      }    
    }
    
  if (beacon_ticks > 0) beacon_ticks--;         // When a beacon is registered, beacon_ticks is set to a certain number (ex 50). Each loop this number is decreased. 
  delay(5);                                     // A new beacon can only be registered when beacon_ticks is zero. This prevents multiple registrations of one beacon.
  
  // --- loop timing -------------------------------
  last_loop_time = millis() - loop_start_time;
  loop_start_time = millis();
  // -----------------------------------------------
  }    
    
    
// ================================================================
// ===                  INTERRUPT FUNCTIONS                     ===
// ================================================================
// Interrupt functions must be as fast as possible. 
void decoder_interrupt() {
  if (beacon_ticks > 0) return;
  
  Serial.println("Beacon registered!");
  
  ir_decoder_d1 = digitalRead(PIN_IR_DECODER_D1);
  ir_decoder_d2 = digitalRead(PIN_IR_DECODER_D2);
  ir_decoder_d3 = digitalRead(PIN_IR_DECODER_D3);
  ir_decoder_d4 = digitalRead(PIN_IR_DECODER_D4);
  
  beacon = 8*ir_decoder_d1 + 4*ir_decoder_d2 + 2*ir_decoder_d3 + 1*ir_decoder_d4; 
  beacon_type = beacon_number_to_type[beacon]; 
  
  if ((current_location == TERMINAL_DEPARTURE && beacon_type == TERMINAL)
      || (current_location == TERMINAL_INTERNATIONAL_DEPARTURE && beacon_type == TERMINAL_INTERNATIONAL)) {                                       
    current_location = STRAIGHT_TRACK; 
    }
  else if (beacon_type == TERMINAL) {
    current_location == TERMINAL_ARRIVAL;
    }
  else if (beacon_type == TERMINAL_INTERNATIONAL) {
    current_location == TERMINAL_INTERNATIONAL_ARRIVAL;
    }
  else if (beacon_type == current_location) {
    current_location = STRAIGHT_TRACK; 
    }
  else {
    current_location = beacon_type;
    }
  location_change = true;
  beacon_ticks = 50;
  }


void emergency_interrupt() {
  emergency_situation = true;
  // send_emergency_message_to_CCE();  
  digitalWrite(PIN_EMERGENCY_COMMUNICATION, HIGH); 
  }
  
  

// ================================================================
// ===                   MOTOR COMMUNICATION                    ===
// ================================================================
// (I2C adress: 2)
/* A standard message contains two bytes: the speed direction (0=forward, 1=backward) and the motor power (0=stop, 255=full speed). 
   In a terminal, the message is extended with an extra byte. (1=normal terminal, 2=international terminal)
   At a normal terminal, the train must stop and return to the side where it came from: 
     When passing the beacon for the normal terminal, a standard message telling to slow down is sent extended with a byte '1' so MOTOR 
     knows we're arriving a normal terminal.
     COMM will then wait for MOTOR to pull high the emergency line when the distance sensor registers the end of the track. 
     COMM will then send a standard message telling to stop and change the direction, again extended with the terminal byte. Motor can now pull down the 
     emergency line and eventually show a message on the LCD. 
     When the terminal waiting time has passed, COMM will send a standard message to depart. 
   At a international terminal, the train must stop and depart in its original direction:
     When passing the beacon for the international terminal, a standard message telling to slow down is sent extended with a byte '2' so MOTOR 
     knows we're arriving an international terminal. 
     This time, there's no end of the track, so COMM will send a standard message after a defined period telling to stop. Tis message is also extended
     with the terminal byte so MOTOR can eventually show an arrival message on the LCD. 
     When the terminal waiting time has passed, COMM will send a standard message to depart. 
*/
  
void send_motor_speed() {
  Wire.beginTransmission(MOTOR_ADRESS);                                 
  if (current_location == TERMINAL_ARRIVAL || current_location == TERMINAL) {
    const char message[] = {motor_speed_direction, motor_power, TERMINAL};
    Wire.write(message, 3);
    }
  else if (current_location == TERMINAL_INTERNATIONAL_ARRIVAL || current_location == TERMINAL_INTERNATIONAL) {
    const char message[] = {motor_speed_direction, motor_power, TERMINAL_INTERNATIONAL};
    Wire.write(message, 3);
    }
  else {
    const char message[] = {motor_speed_direction, motor_power};
    Wire.write(message, 2);
    }
  Wire.endTransmission();                                              
  }

// ================================================================
// ===                  COMFORT COMMUNICATION                   ===
// ================================================================
// (I2C adress: 3)
/* Every message to motor contains one byte: the terminal type of arrival (5=normal terminal, 6=international terminal) or the command to open/close the doors (1=open doors, 0=close doors).
   The terminal type is sent when the train passes the beacon of that terminal. A sound must be played to inform the passengers about the arrival. 
   The command to open/close the doors is sent a little time after the stop and a little time before the departure. While the doors are opening/closing, a warning sound must be played.
*/

void send_comfort_arrival() {
  Wire.beginTransmission(COMFORT_ADRESS); 
  const char message[] = {current_location};
  Wire.write(message, 1);
  Wire.endTransmission();
  }
  
void send_comfort_open_doors() {
  Wire.beginTransmission(COMFORT_ADRESS);
  const char message[] = {1};
  Wire.write(message, 1);
  Wire.endTransmission();
  }

void send_comfort_close_doors() {
  Wire.beginTransmission(COMFORT_ADRESS);
  const char message[] = {0};
  Wire.write(message, 1);
  Wire.endTransmission();
  }

