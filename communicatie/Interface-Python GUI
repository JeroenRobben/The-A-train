# Note: VPython, numpy and pySerial must be installed on you pc

from visual import *
from visual.graph import *
import wx
import serial
import time
import socket

SERIAL_ON = False
WEBSERVER = False
SMART_GUI = False
SMART_GUI_DISTANCE = 60   # distance to previous smart beacon to react on


if WEBSERVER:
    webserver1 = socket.socket()
    webserver1.connect(('airportpeoplemover.uk.to',3000))

RADIUS = 116.           # radius in cm
STRAIGHT = 330.         # straight track length in cm
TERMINAL_LENGTH = 120.  # length of the track between the switch and terminal in cm
TERMINAL_RICO = 0.5     # rico of the track between the switch and terminal in cm

FRAMERATE = 25                # frames per second
SpeedPWMToSpeed = 400./1000.  # in cm/(s PWM)

class TheATrain:
    def __init__(self):

        if WEBSERVER:
            self.webserver = webserver1

        self.Beacons = dict()
        self.Trains = dict()
        self.Locations = dict()
        self.Switches = dict()

        self.set_mainwindow()
        self.draw_track()

        self.FrameRate = FRAMERATE
        self.SpeedPWMToSpeed = SpeedPWMToSpeed

        self.SendStatusValue = 0
        self.SendSpeedValue = 128

        self.previoustimerecord = time.time()
        self.timerecord = time.time()

        if SERIAL_ON:
            self.ArduinoData = serial.Serial('com7', 9600)

    def mainloop(self):

        while True:
            rate(self.FrameRate)

            if SERIAL_ON and self.ArduinoData.inWaiting() > 0:
                self.read_serial_data()

            for Train in self.Trains.itervalues():
                Train.PreviouscmPerFrame = Train.cmPerFrame
                Train.cmPerFrame = Train.Speed/self.FrameRate
                Train.Duplicate.PreviouscmPerFrame = Train.Duplicate.cmPerFrame
                Train.Duplicate.cmPerFrame = Train.Speed/self.FrameRate

                Train.PreviousLocationIndex = Train.LocationIndex
                Train.LocationIndex += Train.IndexDirection * Train.cmPerFrame

                accelerationTerm = Train.IndexDirection*Train.cmPerFrame - Train.PreviouscmPerFrame*Train.PreviousIndexDirection
                accelerationTerm *= (self.timerecord - self.previoustimerecord)
                Train.LocationIndex += accelerationTerm/2.

                if Train.Duplicate.visible:
                    Train.Duplicate.PreviousLocationIndex = Train.Duplicate.PreviousLocationIndex
                    Train.Duplicate.LocationIndex += Train.Duplicate.IndexDirection * Train.cmPerFrame

                    accelerationTerm2 = Train.Duplicate.IndexDirection*Train.Duplicate.cmPerFrame - \
                                        Train.Duplicate.PreviouscmPerFrame*Train.Duplicate.PreviousIndexDirection
                    accelerationTerm2 *= (self.timerecord - self.previoustimerecord)
                    Train.Duplicate.LocationIndex += accelerationTerm2/2.

                # Left switch:
                if Train.Location == self.Locations["Ellipse"] and Train.IndexDirection == 1 \
                        and Train.PreviousLocationIndex <= self.Switches["SwitchLeft"].LocationIndex[self.Locations["Ellipse"]] < Train.LocationIndex \
                        and self.Switches["SwitchLeft"].Status != 0:
                    if self.Switches["SwitchLeft"].Status == 2:
                        self.duplicate_train(Train)
                    Train.Location = self.Locations["LeftTerminal"]
                    Train.LocationIndex -= self.Switches["SwitchLeft"].LocationIndex[self.Locations["Ellipse"]]

                # Right switch:
                if Train.Location == self.Locations["Ellipse"] and Train.IndexDirection == -1 \
                        and Train.PreviousLocationIndex >= self.Switches["SwitchRight"].LocationIndex[self.Locations["Ellipse"]] < Train.LocationIndex \
                        and self.Switches["SwitchRight"].Status != 0:
                    if self.Switches["SwitchRight"].Status == 2:
                        self.duplicate_train(Train)
                    Train.Location = self.Locations["RightTerminal"]
                    Train.LocationIndex = self.Switches["SwitchRight"].LocationIndex[self.Locations["Ellipse"]] - Train.LocationIndex
                    Train.IndexDirection = 1
                    Train.PreviousIndexDirection = 1

                # End of left terminal fix:
                if Train.Location == self.Locations["LeftTerminal"] and Train.LocationIndex >= len(self.Locations["LeftTerminal"].x):
                    Train.LocationIndex = len(self.Locations["LeftTerminal"].x) - 1

                # Start of left terminal fix:
                if Train.Location == self.Locations["LeftTerminal"] and Train.LocationIndex < 0:
                    Train.Location = self.Locations["Ellipse"]
                    Train.LocationIndex += self.Switches["SwitchLeft"].LocationIndex[self.Locations["Ellipse"]]

                # End of right terminal fix:
                if Train.Location == self.Locations["RightTerminal"] and Train.LocationIndex >= len(self.Locations["RightTerminal"].x):
                    Train.LocationIndex = len(self.Locations["RightTerminal"].x) - 1

                # Start of right terminal fix:
                if Train.Location == self.Locations["RightTerminal"] and Train.LocationIndex < 0:
                    Train.Location = self.Locations["Ellipse"]
                    Train.LocationIndex = self.Switches["SwitchRight"].LocationIndex[self.Locations["Ellipse"]] - Train.LocationIndex
                    Train.IndexDirection = 1
                    Train.PreviousIndexDirection = 1

                # End of ellipse fix:
                if Train.Location == self.Locations["Ellipse"] and Train.LocationIndex >= len(self.Locations["Ellipse"].x):
                    Train.LocationIndex -= len(self.Locations["Ellipse"].x)
                if Train.Location == self.Locations["Ellipse"] and Train.LocationIndex < 0:
                    Train.LocationIndex += len(self.Locations["Ellipse"].x)

                xPos = Train.Location.x[int(Train.LocationIndex)]
                zPos = Train.Location.z[int(Train.LocationIndex)]

                Train.pos = (xPos, 0, zPos)

                if Train.Duplicate.visible:
                    xPosDupl = Train.Duplicate.Location.x[int(Train.Duplicate.LocationIndex)]
                    zPosDupl = Train.Duplicate.Location.z[int(Train.Duplicate.LocationIndex)]

                    Train.Duplicate.pos = (xPosDupl, 0, zPosDupl)
                else:
                    xPosDupl = 0
                    zPosDupl = 0

                if SMART_GUI:
                    for Beacon in self.Beacons.itervalues():
                        if Beacon.SmartBeacon and Train.Location == Beacon.Location:
                            if Train.LastBeacon != Beacon \
                                    and Train.IndexDirection == 1 \
                                    and Train.LocationIndex >= Beacon.Index + SMART_GUI_DISTANCE:
                                self.smartGuiSend(Beacon.Number)
                                print "smart gui correction: " + str(Beacon.Number)
                            elif Train.LastBeacon != Beacon \
                                    and Train.IndexDirection == -1 \
                                    and Train.LocationIndex <= Beacon.Index - SMART_GUI_DISTANCE:
                                self.smartGuiSend(Beacon.Number)
                                print "smart gui correction: " + str(Beacon.Number)

                if WEBSERVER:
                    self.webserver.send('echo ' + str(xPos) + ' > TrainAPosX\n')
                    self.webserver.send('echo ' + str(zPos) + ' > TrainAPosZ\n')
                    self.webserver.send('echo ' + str(self.Trains["TrainA"].Duplicate.visible) +
                                        ' > TrainADuplicateVisible\n')
                    self.webserver.send('echo ' + str(xPosDupl) + ' > TrainADuplicatePosX\n')
                    self.webserver.send('echo ' + str(zPosDupl) + ' > TrainADuplicatePosZ\n')

                    self.webserver.send('echo ' + str(self.Trains["TrainA"].Speed) + ' > speed')
                    self.webserver.send('echo ' + str(self.Trains["TrainA"].LastBeacon) + ' > beacon')
                    self.webserver.send('echo ' + str(self.Trains["TrainA"].SpeedDirection) + ' > direction')
                    self.webserver.send('echo ' + str(self.Trains["TrainA"].Status) + ' > Status')

    def read_serial_data(self):

        TextLine = self.ArduinoData.readline()
        DataArray = TextLine.split(" , ")
        print "beacon: ", DataArray[0]
        print "status: ", DataArray[1]
        print "speed: ", DataArray[2]
        print "direction: ", DataArray[3]

        self.previoustimerecord = self.timerecord
        self.timerecord = time.time()

        self.BeaconText.SetLabelText(text="Last beacon: " + str(DataArray[0]))

        for Train in self.Trains.itervalues():
            if Train.LastBeacon.Number != int(DataArray[0]):
                possibleCurrentBeacons = list()
                possibleCurrentBeaconDistances = list()
                #for Beacon in Train.NextBeacons:
                #    if Beacon.Number == int(DataArray[0]):
                #        possibleCurrentBeacons.append(Beacon)
                for Beacon in self.Beacons.itervalues():
                    if Beacon.Number == int(DataArray[0]):
                        possibleCurrentBeacons.append(Beacon)
                for Beacon2 in possibleCurrentBeacons:
                    if Train.Duplicate.visible and Beacon2.Location == Train.Duplicate.Location:
                        self.switch_to_duplicate(Train)
                        distance = abs(Beacon2.Index - Train.Duplicate.LocationIndex)
                        possibleCurrentBeaconDistances.append(distance)
                        break
                    elif Train.Duplicate.visible and Beacon2.Location == Train.Location:
                        Train.Duplicate.visible = False
                        distance = abs(Beacon2.Index - Train.LocationIndex)
                        possibleCurrentBeaconDistances.append(distance)
                        break
                    elif not Train.Duplicate.visible and Beacon2.Location == Train.Location:
                        distance = abs(Beacon2.Index - Train.LocationIndex)
                        possibleCurrentBeaconDistances.append(distance)
                    else:
                        possibleCurrentBeaconDistances.append(float("inf"))
                closestBeaconDistance = float("inf")
                closestBeaconIndex = 0
                for index in range(0, len(possibleCurrentBeaconDistances)-1):
                    if possibleCurrentBeaconDistances[index] < closestBeaconDistance:
                        closestBeaconDistance = possibleCurrentBeaconDistances[index]
                        closestBeaconIndex = index
                Train.PreviousLastBeacon = Train.LastBeacon
                Train.LastBeacon = possibleCurrentBeacons[closestBeaconIndex]
                Train.NextBeacons = {self.Beacons[ID] for ID in self.Beacons[Train.LastBeacon.ID].SurroundingBeaconIDs}
                Train.NextBeaconNumbers = {beacon1.Number for beacon1 in Train.NextBeacons}
                self.NextBeaconText.SetLabelText(text="Next beacon: " + str(Train.NextBeaconNumbers))
                Train.LocationIndex = self.Beacons[Train.LastBeacon.ID].Index

            if int(DataArray[1]) == 0:
                Train.Status = "Autonomous"
            elif int(DataArray[1]) == 1:
                Train.Status = "Controlled"
            elif int(DataArray[1]) == 2:
                Train.Status = "Emergecy!"
            self.StatusText.SetLabelText(text="Status: " + Train.Status)

            SpeedPWM = int(DataArray[2])
            Train.Speed = SpeedPWM * SpeedPWMToSpeed
            self.SpeedText.SetLabelText(text="Speed: " + str(round(Train.Speed, 2)) + " cm/s")

            Train.PreviousSpeedDirection = Train.SpeedDirection
            Train.SpeedDirection = int(DataArray[3])
            if Train.PreviousSpeedDirection != Train.SpeedDirection:
                Train.PreviousIndexDirection = Train.IndexDirection
                Train.IndexDirection *= -1
            if Train.SpeedDirection == 1:
                self.DirectionText.SetLabelText(text="Direction: Forward")
            elif Train.SpeedDirection == 0:
                self.DirectionText.SetLabelText(text="Direction: Backward")

    def set_mainwindow(self):

        self.MainWindow = window(width=1000, height=900, title="The A Train",
                                 style=wx.DEFAULT_FRAME_STYLE & ~(wx.RESIZE_BORDER | wx.MAXIMIZE_BOX))

        self.Scene = display(title='The A Train', window=self.MainWindow)
        self.Scene.width = 1000
        self.Scene.height = 700

        self.Panel = self.MainWindow.panel

        self.Font1 = wx.Font(18, wx.DEFAULT, wx.NORMAL, wx.NORMAL)

        self.StatusText = wx.StaticText(self.Panel, pos=(10, 710), label="Status: ", size=(400, 25),
                                        style=wx.ALIGN_LEFT | wx.ST_NO_AUTORESIZE)
        self.StatusText.SetFont(self.Font1)
        self.SpeedText = wx.StaticText(self.Panel, pos=(10, 740), label="Speed: ", size=(400, 25),
                                       style=wx.ALIGN_LEFT | wx.ST_NO_AUTORESIZE)
        self.SpeedText.SetFont(self.Font1)
        self.DirectionText = wx.StaticText(self.Panel, pos=(10, 770), label="Direction: ", size=(400, 25),
                                           style=wx.ALIGN_LEFT | wx.ST_NO_AUTORESIZE)
        self.DirectionText.SetFont(self.Font1)
        self.BeaconText = wx.StaticText(self.Panel, pos=(10, 800), label="Last beacon: ", size=(400, 25),
                                        style=wx.ALIGN_LEFT | wx.ST_NO_AUTORESIZE)
        self.BeaconText.SetFont(self.Font1)
        self.NextBeaconText = wx.StaticText(self.Panel, pos=(10, 830), label="Next beacon: ", size=(400, 25),
                                            style=wx.ALIGN_LEFT | wx.ST_NO_AUTORESIZE)
        self.NextBeaconText.SetFont(self.Font1)

        self.SendText = wx.StaticText(self.Panel, pos=(480, 710), label="Send status and speed to Train A:",
                                      size=(400, 28), style=wx.ALIGN_LEFT | wx.ST_NO_AUTORESIZE)
        self.SendText.SetFont(self.Font1)
        self.StatusBox = wx.RadioBox(self.Panel, pos=(480, 740), size=(130, 85),
                                     choices=["Autonomous", "Controlled", "Emergency"], style=wx.RA_SPECIFY_ROWS)
        self.StatusBox.Bind(wx.EVT_RADIOBOX, self.toggleStatus)
        self.SpeedSlider = wx.Slider(self.Panel, pos=(670, 780), size=(270, 20), minValue=0, maxValue=255,
                                     style=wx.SL_LABELS)
        self.SpeedSlider.Bind(wx.EVT_SCROLL, self.setSpeed)
        self.SpeedSliderMin = wx.StaticText(self.Panel, pos=(647, 765), label="Full Backward",
                                            style=wx.ALIGN_LEFT | wx.ST_NO_AUTORESIZE)
        self.SpeedSliderMax = wx.StaticText(self.Panel, pos=(895, 765), label="Full Forward",
                                            style=wx.ALIGN_LEFT | wx.ST_NO_AUTORESIZE)
        self.SendButton = wx.Button(self.Panel, label="Send", pos=(480, 834))
        self.SendButton.Bind(wx.EVT_BUTTON, self.sendCommand)

        self.InitButton = wx.Button(self.Panel, label="Initialisation message", pos=(647, 834))
        self.InitButton.Bind(wx.EVT_BUTTON, self.sendInitCommand)

    def toggleStatus(self, evt):
        self.SendStatusValue = self.StatusBox.GetSelection()

    def setSpeed(self, evt):
        self.SendSpeedValue = self.SpeedSlider.GetValue()

    def sendInitCommand(self, evt):
        message = "I"
        if SERIAL_ON:
            self.ArduinoData.write(message)
        print "send initialisation command"

    def sendCommand(self, evt):
        message = str(self.SendSpeedValue) + str(self.SendStatusValue)
        while len(message) != 4:
            message = "0" + message
        print message
        if SERIAL_ON:
            self.ArduinoData.write(message)

    def smartGuiSend(self, missedNumber):
        message = str(missedNumber)
        while len(message) != 2:
            message = "0" + message

        if SERIAL_ON:
            self.ArduinoData.write(message)

    def add_beacon(self, location, ID, number, type, index, surroundingBeaconIDs=set([]), visible=True, smartBeacon=False):
        self.Beacons[ID] = beacon(location, ID, number, type, index, surroundingBeaconIDs, visible, smartBeacon)

    def add_train(self, ID, location, lastBeacon, previousLastBeacon, nextBeacons, serialDataIndex, radius=6., color=color.green, pos=(0, 0, 0), visible=True):
        self.Trains[ID] = train(ID, location, lastBeacon, previousLastBeacon, nextBeacons, serialDataIndex, radius, color, pos, visible)
        self.Trains[ID].Duplicate = train(ID+"Duplicate", location, lastBeacon, previousLastBeacon, nextBeacons, serialDataIndex, radius, color, pos, False)

    def switch_to_duplicate(self, train):
        train.Location = train.Duplicate.Location
        train.LastBeacon = train.Duplicate.LastBeacon
        train.PreviousLastBeacon = train.Duplicate.PreviousLastBeacon
        train.NextBeacons = train.Duplicate.NextBeacons
        train.NextBeaconNumbers = train.Duplicate.NextBeaconNumbers
        train.pos = train.Duplicate.pos
        train.IndexSpeed = train.Duplicate.IndexSpeed
        train.IndexDirection = train.Duplicate.IndexDirection
        train.Speed = train.Duplicate.IndexSpeed
        train.SpeedDirection = train.Duplicate.SpeedDirection
        train.PreviousSpeedDirection = train.Duplicate.PreviousSpeedDirection
        train.LocationIndex = train.Duplicate.LocationIndex
        train.PreviousLocationIndex = train.Duplicate.PreviousLocationIndex
        train.Status = train.Duplicate.Status
        train.PreviouscmPerFrame = train.Duplicate.PreviouscmPerFrame
        train.PreviousIndexDirection = train.Duplicate.PreviousIndexDirection
        train.cmPerFrame = train.Duplicate.cmPerFrame
        train.PreviouscmPerFrame = train.Duplicate.PreviouscmPerFrame
        train.Duplicate.visible = False

    def duplicate_train(self, train):
        train.Duplicate.Location = train.Location
        train.Duplicate.LastBeacon = train.LastBeacon
        train.Duplicate.PreviousLastBeacon = train.PreviousLastBeacon
        train.Duplicate.NextBeacons = train.NextBeacons
        train.Duplicate.NextBeaconNumbers = train.NextBeaconNumbers
        train.Duplicate.pos = train.pos
        train.Duplicate.IndexSpeed = train.IndexSpeed
        train.Duplicate.IndexDirection = train.IndexDirection
        train.Duplicate.Speed = train.IndexSpeed
        train.Duplicate.SpeedDirection = train.SpeedDirection
        train.Duplicate.PreviousSpeedDirection = train.PreviousSpeedDirection
        train.Duplicate.LocationIndex = train.LocationIndex
        train.Duplicate.PreviousLocationIndex = train.PreviousLocationIndex
        train.Duplicate.Status = train.Status
        train.Duplicate.PreviouscmPerFrame = train.PreviouscmPerFrame
        train.Duplicate.PreviousIndexDirection = train.PreviousIndexDirection
        train.Duplicate.cmPerFrame = train.cmPerFrame
        train.Duplicate.PreviouscmPerFrame = train.PreviouscmPerFrame
        train.Duplicate.visible = True


    def add_location(self, ID, xArray, yArray, zArray, color1=color.red, radius1=1.):
        self.Locations[ID] = location(ID, xArray, yArray, zArray, color1, radius1)

    def add_switch(self, ID, location1, location1Index, location2, location2Index, position, color1=color.black,
                   status1=2, radius1=1.5):
        self.Switches[ID] = switch(ID, location1, location1Index, location2, location2Index, position, status1, color1, radius1)

    def draw_track(self):

        self.Radius = RADIUS
        self.Straight = STRAIGHT
        self.TerminalLength = TERMINAL_LENGTH
        self.TerminalRico = TERMINAL_RICO

        self.Floor = box(pos=(0, -5, -30), length=600, width=400, height=10, color=color.white)

        q1 = arange(0, pi*RADIUS/2, 1.)
        q2 = q1 + pi*RADIUS/2
        q3 = q1 + pi*RADIUS
        q4 = q1 + pi*RADIUS*3/2

        d1 = arange(0, TERMINAL_LENGTH, 1.)
        d2 = -d1

        ArrayXRightLowerCurve = RADIUS*cos(q1/RADIUS) + STRAIGHT/2
        ArrayZRightLowerCurve = RADIUS*sin(q1/RADIUS) - 50
        ArrayXLeftLowerCurve = RADIUS*cos(q2/RADIUS) - STRAIGHT/2
        ArrayZLeftLowerCurve = RADIUS*sin(q2/RADIUS) - 50
        ArrayXLeftUpperCurve = RADIUS*cos(q3/RADIUS) - STRAIGHT/2
        ArrayZLeftUpperCurve = RADIUS*sin(q3/RADIUS) - 50
        ArrayXRightUpperCurve = RADIUS*cos(q4/RADIUS) + STRAIGHT/2
        ArrayZRightUpperCurve = RADIUS*sin(q4/RADIUS) - 50

        ArrayXUpperStraight = arange(-STRAIGHT/2, STRAIGHT/2, 1.)
        ArrayZUpperStraight = zeros(len(ArrayXUpperStraight))-RADIUS - 50
        ArrayXLowerStraight = -ArrayXUpperStraight
        ArrayZLowerStraight = zeros(len(ArrayXLowerStraight))+RADIUS - 50

        ArrayXRightTerminal = d1/(sqrt(1.+TERMINAL_RICO**2)) + STRAIGHT/2
        ArrayZRightTerminal = TERMINAL_RICO*d1/(sqrt(1.+TERMINAL_RICO**2)) + RADIUS - 50

        ArrayXLeftTerminal = -d1/(sqrt(1.+TERMINAL_RICO**2)) - STRAIGHT/2
        ArrayZLeftTerminal = -TERMINAL_RICO*(-d1/(sqrt(1.+TERMINAL_RICO**2))) + RADIUS - 50

        ArrayXCurve = append(ArrayXRightLowerCurve, ArrayXLowerStraight)
        ArrayXCurve = append(ArrayXCurve, ArrayXLeftLowerCurve)
        ArrayXCurve = append(ArrayXCurve, ArrayXLeftUpperCurve)
        ArrayXCurve = append(ArrayXCurve, ArrayXUpperStraight)
        ArrayXCurve = append(ArrayXCurve, ArrayXRightUpperCurve)

        ArrayZCurve = append(ArrayZRightLowerCurve, ArrayZLowerStraight)
        ArrayZCurve = append(ArrayZCurve, ArrayZLeftLowerCurve)
        ArrayZCurve = append(ArrayZCurve, ArrayZLeftUpperCurve)
        ArrayZCurve = append(ArrayZCurve, ArrayZUpperStraight)
        ArrayZCurve = append(ArrayZCurve, ArrayZRightUpperCurve)

        self.Origin = sphere(radius=2., color=color.blue, pos=(0, 0, 0))

        self.add_location(ID="Ellipse", xArray=ArrayXCurve, yArray=0, zArray=ArrayZCurve)
        self.add_location(ID="RightTerminal", xArray=ArrayXRightTerminal, yArray=0, zArray=ArrayZRightTerminal)
        self.add_location(ID="LeftTerminal", xArray=ArrayXLeftTerminal, yArray=0, zArray=ArrayZLeftTerminal)

        self.add_switch(ID="SwitchLeft", location1=self.Locations["Ellipse"], location2=self.Locations["LeftTerminal"],
                        location1Index=int(where(ArrayXCurve == -STRAIGHT/2)[0][0]), location2Index=0,
                        status1=2, position=(-STRAIGHT/2, 0, RADIUS-50))
        self.add_switch(ID="SwitchRight", location1=self.Locations["Ellipse"], location2=self.Locations["RightTerminal"],
                        location1Index=int(where(ArrayXCurve == STRAIGHT/2)[0][0]), location2Index=0,
                        status1=2, position=(STRAIGHT/2, 0, RADIUS-50))

        # beacon types: 0=straight, 1=terminal, 2=terminalInternational, 3=turn, 4=switch
        #               5=turn&switch, 6=terminalArrival&switch, 7=terminalArrival (8=terminalDeparture)
        #               9=terminalArrival&turn

        self.add_beacon(location=self.Locations["Ellipse"], ID="b0", number=0, type=0, index=0,
                        surroundingBeaconIDs={"b1", "b11"}, visible=False)
        self.add_beacon(self.Locations["Ellipse"], "b1", 4, 5, self.Switches["SwitchRight"].LocationIndex[self.Locations["Ellipse"]] - 100, {"b2", "b11"})
        self.add_beacon(self.Locations["Ellipse"], "b2", 9, 4, self.Switches["SwitchRight"].LocationIndex[self.Locations["Ellipse"]] + 100, {"b1", "b3", "b5"}, smartBeacon=True)
        self.add_beacon(self.Locations["RightTerminal"], "b3", 6, 6, 50, {"b2", "b4"}, smartBeacon=True)
        self.add_beacon(self.Locations["RightTerminal"], "b4", 8, 1, len(self.Locations["RightTerminal"].x)-1, {"b3"}, smartBeacon=True)
        self.add_beacon(self.Locations["Ellipse"], "b5", 5, 4, self.Switches["SwitchLeft"].LocationIndex[self.Locations["Ellipse"]] - 100, {"b2", "b6", "b7"})
        self.add_beacon(self.Locations["Ellipse"], "b6", 3, 5, self.Switches["SwitchLeft"].LocationIndex[self.Locations["Ellipse"]] + 100, {"b9", "b5"})
        self.add_beacon(self.Locations["LeftTerminal"], "b7", 6, 6, 50, {"b5", "b8"})
        self.add_beacon(self.Locations["LeftTerminal"], "b8", 7, 1, len(self.Locations["LeftTerminal"].x)-1, {"b7"})
        for index in arange(len(self.Locations["Ellipse"].z)/2, len(self.Locations["Ellipse"].z)):
            if self.Locations["Ellipse"].z[index] == -self.Radius - 50:
                test = index
                break
        self.add_beacon(self.Locations["Ellipse"], "b9", 2, 9, test + 50, {"b10", "b6"})
        self.add_beacon(self.Locations["Ellipse"], "b10", 1, 2, test + self.Straight/2, {"b9", "b11"})
        self.add_beacon(self.Locations["Ellipse"], "b11", 2, 9, test + self.Straight - 50, {"b10", "b1"})

        self.add_train(ID="TrainA", location=self.Locations["Ellipse"], lastBeacon=self.Beacons["b0"],
                       previousLastBeacon=self.Beacons["b0"], nextBeacons={self.Beacons["b1"], self.Beacons["b11"]},
                       serialDataIndex=[0, 1, 2, 3])


class train(sphere):
    def __init__(self, ID, location, lastBeacon, previousLastBeacon, nextBeacons, serialDataIndex, radius=6., color=color.green,
                 pos=(0, 0, 0), visible=True):
        sphere.__init__(self, radius=radius, color=color, pos=pos, visible=visible)
        self.IndexSpeed = 0                 # cm/frame or indices/frame
        self.IndexDirection = 1             # 1=clockwise,  -1=counterclockwise
        self.Speed = 0.                     # in cm/s
        self.SpeedDirection = 1             # 1=forward
        self.PreviousSpeedDirection = self.SpeedDirection
        self.PreviousIndexDirection = 1
        self.Location = location
        self.LocationIndex = 0
        self.PreviousLocationIndex = 0
        self.Status = "Autonomous"
        self.LastBeacon = lastBeacon
        self.PreviousLastBeacon = previousLastBeacon
        self.NextBeacons = nextBeacons
        self.NextBeaconNumbers = {beacon1.Number for beacon1 in self.NextBeacons}
        self.closestBeaconIndex = 0
        self.ID = ID
        self.cmPerFrame = 0
        self.PreviouscmPerFrame = 0
        assert isinstance(serialDataIndex, list)
        assert len(serialDataIndex) == 4
        self.SerialDataIndex = serialDataIndex  # the index in the serial data input with the information for this train


class beacon(sphere):
    def __init__(self, location, ID, number, type, index, surroundingBeaconIDs=set([]), visible=True, smartBeacon=False):
        self.Location = location
        self.ID = ID
        self.Number = number
        self.Type = type
        self.Index = index
        self.SurroundingBeaconIDs = surroundingBeaconIDs
        self.SmartBeacon = smartBeacon

        sphere.__init__(self, radius=3., color=color.blue, visible=visible,
                        pos=(self.Location.x[int(index)], 0, self.Location.z[int(index)]))
        self.Label = label(pos=(self.pos[0], 25, self.pos[2]), text=str(number), box=False, visible=visible)


class location(curve):
    def __init__(self, ID, xArray, yArray, zArray, color1=color.red, radius1=1.):
        curve.__init__(self, x=xArray, y=yArray, z=zArray, color=color1, radius=radius1)
        self.ID = ID


class switch(sphere):
    def __init__(self, ID, location1, location1Index, location2, location2Index, position, status=2, color1=color.black,
                 radius1=1.5):
        sphere.__init__(self, pos=position, color=color1, radius=radius1)
        self.LocationIndex = dict([(location1, location1Index), (location2, location2Index)])
        self.ID = ID
        self.Status = status      # 0=off, 1=on, 2=unknown


print "Starting TheATrain..."
theATrain = TheATrain()
theATrain.mainloop()
print "Finished"
print "Jef was here :DDDDDD"
