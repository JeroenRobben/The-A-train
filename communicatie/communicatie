/*
  Copyright (c) 2015 Johannes Verherstraeten
  
  This code makes use of the library VirtualWire, written by Mike McCauley (mikem@airspayce.com)

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/ 

boolean TURN_OFF_EMERGENCY = true;

#include <Wire.h>                                      // include library for I2C communication.
#include "VirtualWireWithoutPTT.h"                     // include library for radio communication.

// Pin definitions: 
int PIN_IR_DECODER_VT = 1;                             // pin from the decoder that jumps high when a beacon has been coded correctly.
int PIN_IR_DECODER_D1 = 10;                            // least significant bit.
int PIN_IR_DECODER_D2 = 11;
int PIN_IR_DECODER_D3 = 8;
int PIN_IR_DECODER_D4 = A0;                            // most significant bit.
int PIN_EMERGENCY_MOTOR = 0;                           // emergency interrupt pin.
int PIN_EMERGENCY_COMMUNICATION = 7;                   // emergency interrupt pin.
int TRANSMIT_PIN = 12;                                 // radio transmitter pin.
int RECEIVE_PIN =13;                                   // radio receiver pin.

// I2C adresses:
byte MOTOR_ADRESS = 2;
byte COMFORT_ADRESS = 3;
// RF adresses:
int CCE_ADRESS = 0;
int COMM_ADRESS = 1;

// IR interrupt variables:                             // Values that can be changed in an interrupt function must be declared as volatile.
volatile boolean ir_decoder_d1;                        // binary decoder readings.
volatile boolean ir_decoder_d2;
volatile boolean ir_decoder_d3;
volatile boolean ir_decoder_d4;
volatile byte current_location;                        // contains current location type byte.                START VALUE NEEDED!!
volatile byte beacon;                                  // contains last passed beacon number.
volatile byte beacon_type;                             // contains last passed beacon type. 
volatile int beacon_ticks = 0;                         // prevents multiple registration of one beacon. A beacon will only be registered when beacon_ticks is back at zero.
volatile boolean location_change = false;              // true if the location type is changed.

// Emergency interrupt variables:
volatile byte current_status = 0;                      // status: 0=CCE independant, 1=controlled by CCE, 2=state of emergency.

// Loop timing variables: 
unsigned long last_loop_time;                          // time in milliseconds of last loop.
unsigned long loop_start_time;                         // time in milliseconds since Arduino startup. The starting time of the last loop.

// Timing control variables:
float TIME_BETWEEN_TRANSMISSIONS = 2000;               // time in milliseconds between radio transmissions. 
float TIME_TO_OPEN_DOORS = 1500;                       // time in milliseconds between stopping the train and opening the doors. 
float TIME_TO_CLOSE_DOORS = 1500;                      // time in milliseconds between closing the doors and departure. 
float terminal_waiting_time = 20000;                   // time in milliseconds. The time the train must wait in a normal terminal.
float terminal_international_waiting_time = 40000;     // time in milliseconds. The time the train must wait in an international terminal.
unsigned long arrival_time;                            // time in milliseconds since Arduino startup. The time when the train stops at the terminal.
unsigned long doors_opening_time;                      // time in milliseconds since Arduino startup. The time when the doors open in the terminal.
unsigned long doors_closing_time;                      // time in milliseconds since Arduino startup. The time when the doors close in the terminal.
unsigned long departure_time = 0;                          // time in milliseconds since Arduino startup. The time of departure.
unsigned long current_time;                            // time in milliseconds since Arduino startup. The time measured at that moment.
unsigned long next_transmission_time;                  // time in milliseconds since Arduino startup. The time for the next radio transmission.
boolean doors_opened = false;

boolean CCE_message_received = false;                  // did the train receive a CCE message since the last transmission.
byte previous_speedbyte;                               // copy of the previous values sent to motor to avoid multiple identical I2C messages.
byte previous_directionbyte;
byte previous_location_sent;

// Speed & direction:
volatile byte CCE_speed;                               // value between 0 and 255. Speed desired by CCE, when in CCE controlled mode.
volatile byte CCE_speed_direction;                     // 1=forward, 0=backward. Direction desired by CCE, when in CCE controlled mode.
byte track_speed;                                      // value between 0 and 255. Speed when in independant mode.
byte track_speed_direction;                            // 1=forward, 0=backward. Direction when in independant mode.
boolean FORWARD = 1;
boolean BACKWARD = 0;
byte FULL_SPEED = 180;
byte HALF_SPEED = 100;
byte SLOW_SPEED = 60;
byte STOP = 0; 

// Location types: 
byte STRAIGHT_TRACK = 0;
byte TERMINAL = 1;
byte TERMINAL_INTERNATIONAL = 2;
byte TRACK_TURN = 3;
byte TRACK_SWITCH = 4;

byte TRACK_SWITCH_AND_TURN = 5;                  // only a beacon type, cannot be a current location.
byte TRACK_SWITCH_AND_TERMINAL_ARRIVAL = 6;      // only a beacon type, cannot be a current location.

byte TERMINAL_ARRIVAL = 7;
byte TERMINAL_DEPARTURE = 8;                     // only a location type, cannot be a beacon type.

// Beacon number -> beacon type array
// Each beacon can have a number from 0 to 15 so CCE can track our location. But we need to know the type of 
// location this beacon marks. The value at the index of the beacon number represents the location type. 
byte beacon_number_to_type[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};


// ============================================================================
// =========                      INITIAL SETUP                       =========
// ============================================================================

void setup() {

  Serial.begin(115200);                              // start serial communication with pc, baudrate: 115200.
  while (!Serial);
  Serial.print("setup");
  Wire.begin();                                      // join i2c bus for communication with MOTOR and COMFORT (address optional for master).
  
  vw_set_tx_pin(TRANSMIT_PIN);                       // set virtual wire for RF communication
  vw_set_rx_pin(RECEIVE_PIN);
  vw_setup(2000);	                             // Bits per sec
  vw_rx_start();                                     // Start the receiver PLL running
  
  pinMode(PIN_IR_DECODER_VT, INPUT);
  pinMode(PIN_IR_DECODER_D1, INPUT);
  pinMode(PIN_IR_DECODER_D2, INPUT);
  pinMode(PIN_IR_DECODER_D3, INPUT);
  pinMode(PIN_IR_DECODER_D4, INPUT);
  pinMode(PIN_EMERGENCY_MOTOR, INPUT);
  pinMode(PIN_EMERGENCY_COMMUNICATION, OUTPUT);
  
  pinMode(A1, INPUT);
  pinMode(A2, INPUT);
  pinMode(A3, INPUT);
  pinMode(A4, INPUT);
  pinMode(A5, INPUT);
  pinMode(4, INPUT);
  pinMode(5, INPUT);
  pinMode(6, INPUT);
  pinMode(9, INPUT);
  
  
  current_location = STRAIGHT_TRACK;                 // start position and direction. Temporary solution since there is no initialisation message yet.
  track_speed_direction = FORWARD;
  beacon = 0; 
  location_change = true; 
  digitalWrite(PIN_EMERGENCY_COMMUNICATION, LOW);

  attachInterrupt(digitalPinToInterrupt(PIN_IR_DECODER_VT), decoder_interrupt, RISING);      // call decoder interrupt function when VT pin goes high.
  attachInterrupt(digitalPinToInterrupt(PIN_EMERGENCY_MOTOR), emergency_interrupt, CHANGE);  // call emergency interrupt function when motor emergency pin changes.
  
  loop_start_time = millis();                                                         // save the loop start time.
  next_transmission_time = loop_start_time + TIME_BETWEEN_TRANSMISSIONS;              // set the time for the next radio transmission.
  }


// ============================================================================
// =========                    MAIN PROGRAM LOOP                     =========
// ============================================================================
// The main program loop is optimized for running-through as fast as possible. (almost no delays etc...)
// This means we can listen almost continuously for messages from CCE and react as quickly as possible.
void loop() {
  
  // ----------- State of emergency ------------------------------------------------------------------------------------------------------------
  if (current_status == 2) {
    Serial.println("Emergency situation!"); 
    delay(100);
    }
  // ----------- Location change ---------------------------------------------------------------------------------------------------------------
  else if (location_change) {                                      // things that happen when location type changes. 
    Serial.print("Location change. Current location: ");
    Serial.println(current_location);
    location_change_function();
    }
  // ----------- No location change ------------------------------------------------------------------------------------------------------------
  else {                                                           // things that happen when location type doesn't change.
    if (current_location == TERMINAL || current_location == TERMINAL_INTERNATIONAL) {
      terminal_function();
      }
    }
  // ----------- CCE messages ------------------------------------------------------------------------------------------------------------------                                                                                       
  uint8_t buf[VW_MAX_MESSAGE_LEN];                                          // initialize the VirtualWire buffer
  uint8_t buflen = VW_MAX_MESSAGE_LEN;                                      // initialize the VirtualWire buffer length value.
  
  current_time = millis();
  
  if (current_time >= next_transmission_time){                              // when it's time for another radio transmission:
    next_transmission_time = current_time + TIME_BETWEEN_TRANSMISSIONS;     // set new transmission time,
    send_CCE_message();                                                     // and send the message.
    }
    
  if (vw_have_message()) {                                                  // if a message received:
    if (vw_get_message(buf, &buflen)) {                                     // if the message is correctly decoded:
      if (buf[0] == COMM_ADRESS) {                                          // if the first byte is the communication adress:
        get_CCE_message(buf, buflen);                                       // get the message.
        CCE_message_received = true;
        }
      else CCE_message_received = false;
      }
    else CCE_message_received = false;
    }
  else CCE_message_received = false;
  // ----------- Time control ------------------------------------------------------------------------------------------------------------------
  if (beacon_ticks > 0) beacon_ticks--;    // When a beacon is registered, beacon_ticks is set to a certain number (ex 50). Each loop this number is decreased. 
  delay(5);                                // A new beacon can only be registered when beacon_ticks is zero. This prevents multiple registrations of one beacon.
  // --- loop timing -------------------------------
  last_loop_time = millis() - loop_start_time;
  loop_start_time = millis();
  // -----------------------------------------------
  }        
    
    
// ============================================================================
// =========                  INTERRUPT FUNCTIONS                     =========
// ============================================================================
// Interrupt functions must be as fast as possible.
void emergency_interrupt() {                                   // when the emergency line from motor goes changes: 
  if (TURN_OFF_EMERGENCY) {
    return;
    }
  bool emergency_motor = digitalRead(PIN_EMERGENCY_MOTOR);
  
  switch (emergency_motor) {
    case 0:                                                    // if the line goes low, emergency situation ended.
      current_status = 1;                                      // but wait for a message from CCE to start again.
      CCE_speed = 0;
      CCE_speed_direction = track_speed_direction; 
      send_motor_speed();                          
      break;
    case 1:                                                    // if the line goes high, emergency situation started.
      current_status = 2;                                      // the next time a message will be sent to CCE, the
      break;                                                   // status will be emergency. 
    }
  }
  
  
void decoder_interrupt() {                                     // when the decoder pulls the VT line high: 
  if (beacon_ticks > 0) return;                                // do nothing when beacon ticks is not yet zero.
  
  Serial.println("Beacon registered!");
  
  ir_decoder_d1 = digitalRead(PIN_IR_DECODER_D1);              // read the decoder pins. 
  ir_decoder_d2 = digitalRead(PIN_IR_DECODER_D2);
  ir_decoder_d3 = digitalRead(PIN_IR_DECODER_D3);
  ir_decoder_d4 = digitalRead(PIN_IR_DECODER_D4);
  
  beacon = 1*ir_decoder_d1 + 2*ir_decoder_d2 + 4*ir_decoder_d3 + 8*ir_decoder_d4;   // get the beacon number.
  beacon_type = beacon_number_to_type[beacon];                                      // translate the beacon number to the beacon type.
  
  if (beacon_type == TERMINAL && current_location != TERMINAL_ARRIVAL) {            // change the current location dependant on the beacon.
    // don't change the current location... 
    return;
    }
  else if (beacon_type == TERMINAL_ARRIVAL && current_location == TERMINAL_DEPARTURE) {
    current_location = STRAIGHT_TRACK;
    }
  else if (beacon_type == TRACK_SWITCH_AND_TERMINAL_ARRIVAL && current_location == TRACK_SWITCH) {
    current_location = TERMINAL_ARRIVAL;
    }
  else if (beacon_type == TRACK_SWITCH_AND_TERMINAL_ARRIVAL) {
    current_location = TRACK_SWITCH;
    }
  else if (beacon_type == TRACK_SWITCH_AND_TURN && current_location == TRACK_TURN) {
    current_location = TRACK_SWITCH;
    }
  else if (beacon_type == TRACK_SWITCH_AND_TURN) {
    current_location = TRACK_TURN;
    }
  else if (beacon_type == current_location) {
    current_location = STRAIGHT_TRACK;
    }
  else {
    current_location = beacon_type;
    }
  location_change = true;
  beacon_ticks = 50;                                    // set beacon ticks to prevent multiple registration of the same beacon.
  }    
    
// ============================================================================
// =========                   HELPER FUNCTIONS                       =========
// ============================================================================    

void location_change_function() {                       // things that happen when the current location changes.
  
  if (current_location == STRAIGHT_TRACK) {
    track_speed = FULL_SPEED;
    }
  else if (current_location == TRACK_TURN || current_location == TRACK_SWITCH) {
    track_speed = HALF_SPEED; 
    }
  else if (current_location == TERMINAL_ARRIVAL) {
    track_speed = SLOW_SPEED;
    send_comfort_arrival();
    }
  else if (current_location == TERMINAL) {
    track_speed = STOP;
    track_speed_direction = !track_speed_direction;
    arrival_time = millis();
    doors_opening_time = arrival_time + TIME_TO_OPEN_DOORS; 
    }
  else if (current_location == TERMINAL_INTERNATIONAL) {
    track_speed = STOP;
    arrival_time = millis();
    doors_opening_time = arrival_time + TIME_TO_OPEN_DOORS; 
    }
  else if (current_location == TERMINAL_DEPARTURE) {
    track_speed = SLOW_SPEED;
    }
      
  if (current_status == 0){
    send_motor_speed();
    }
  location_change = false;
  }


void terminal_function() {                             // timing control in the terminals.
  current_time = millis();
  // If departure_time is already updated and exceeded and the doors are closed: depart. 
  if ((departure_time > arrival_time) && (current_time > departure_time) && (doors_opened == false)) {               
    Serial.println("Departure");
    location_change = true;
    current_location = TERMINAL_DEPARTURE;
    }
  // If door_closing_time is already updated and exceeded and the doors are still open: close doors.
  else if ((doors_closing_time > arrival_time) && (current_time > doors_closing_time) && (doors_opened == true)) {    
    Serial.println("Close doors");
    send_comfort_close_doors(); 
    doors_opened = false;
    departure_time = current_time + TIME_TO_CLOSE_DOORS;  // and update departure_time.
    }
  // If the doors_opening_time is exceeded and the doors are still closed: open doors.
  else if (departure_time < arrival_time && current_time > doors_opening_time && doors_opened == false) {                 
    Serial.println("Open doors");
    send_comfort_open_doors();
    doors_opened = true;
    if (current_location == TERMINAL) {
      doors_closing_time = current_time + terminal_waiting_time;  // and update doors_closing_time.
      }
    else {
      doors_closing_time = current_time + terminal_international_waiting_time;
      }
    }
  else {
    delay(10);
    }
  }


void send_CCE_message() {     
  uint8_t msg[] = {CCE_ADRESS, beacon, current_status, CCE_message_received};
  vw_send(msg, 4);
  vw_wait_tx();                           // Wait until the whole message is gone
  Serial.println("CCE message sent");
  } 


void get_CCE_message(uint8_t buff[], uint8_t bufflen) {
  int i;
  Serial.print("CCE message: ");           // print the received message: |...
  for (i=0; i<bufflen; i++) {
    Serial.print(buff[i]);
    Serial.print(" ");
    } 
  Serial.println("");                      // ...|
  
  if (bufflen == 3) {                      // only interpret the messages with length 3. 
    current_status = buff[2];
    if (current_status == 1) {             // if status == CCE_controlled:
      digitalWrite(PIN_EMERGENCY_COMMUNICATION, LOW); 
      get_CCE_speed(buff[1]);
      delay(1);
      send_motor_speed();
      }
    else if (current_status == 2) {        // if status == emergency:
      CCE_speed = STOP;
      digitalWrite(PIN_EMERGENCY_COMMUNICATION, HIGH); 
      }
    else {                                 // if status == CCE_independant:
      digitalWrite(PIN_EMERGENCY_COMMUNICATION, LOW);
      location_change = true;
      }
    }
  }


void get_CCE_speed(uint8_t speedbyte) {                      // translate the speedbyte received from the CCE to 2 bytes (direction and speed).
  if (speedbyte > 128) {
    CCE_speed_direction = FORWARD;
    CCE_speed = map(speedbyte, 128, 255, STOP, FULL_SPEED);
    }
  else if (speedbyte < 128) {
    CCE_speed_direction = BACKWARD;
    CCE_speed = map(speedbyte, 128, 0, STOP, FULL_SPEED);
    }
  else CCE_speed = 0;
  }



// ============================================================================
// =========                   MOTOR COMMUNICATION                    =========
// ============================================================================
// (I2C adress: 2)
/* A standard message contains two bytes: the speed direction (1=forward, 0=backward) and the motor power (0=stop, 255=full speed). 
   In a terminal, the message is extended with an extra byte. (1=normal terminal, 2=international terminal)
   At a terminal, the train must stop and -in case of a normal terminal- return to the side where it came from: 
     When passing the beacon for the terminal, a standard message telling to slow down is sent.
     When the train must stop at the terminal, COMM will send a standard message extended with the terminal byte (1=normal terminal, 
     2=international terminal), telling to stop and eventually change the direction, 
     When the terminal waiting time has passed, COMM will send a standard message to depart. 
   Emergency situation:
     When MOTOR pulls the emergency line high, COMM only sends a message to CCE (and doesn't pull the COMM emergency line high)
     When MOTOR pulls the emergency line low again, COMM will send a message to stand still untill CCE tells us to go on. 
     When COMM pulls the emergency line high and then low again, a message will be sent to motor with the desired speed.  
*/
void send_motor_speed() { 
  byte speedbyte_send;                              // check which speed to send: the CCE speed or the automatic track speed:
  byte directionbyte_send;   
  if (current_status == 0) {                         
    speedbyte_send = track_speed;
    directionbyte_send = track_speed_direction;
    }
  else {
    speedbyte_send = CCE_speed;
    directionbyte_send = CCE_speed_direction;
    }
  Serial.print("Send motor:");
  Serial.println(speedbyte_send);
  
  if (speedbyte_send == previous_speedbyte && directionbyte_send == previous_directionbyte  // check if not the same message as last time.
      && current_location == previous_location_sent) {
    return;                                                                                 // if so: quit the function.
    }
  
  Wire.beginTransmission(MOTOR_ADRESS);                                 
  if (current_location == TERMINAL || current_location == TERMINAL_INTERNATIONAL) {
    const char message[] = {directionbyte_send, speedbyte_send, current_location};
    Wire.write(message, 3);
    }
  else {
    const char message[] = {directionbyte_send, speedbyte_send};
    Wire.write(message, 2);
    }
  Wire.endTransmission();  

  previous_speedbyte = speedbyte_send;
  previous_directionbyte = directionbyte_send;
  previous_location_sent = current_location;  
  }


// ============================================================================
// =========                  COMFORT COMMUNICATION                   =========
// ============================================================================
// (I2C adress: 3)
/* Every message to comfort contains one byte: the terminal arrival byte (=2) or the command to open/close the doors (1=open doors, 0=close doors).
   The terminal arrival byte is sent when the train passes the beacon of a terminal. A sound must be played to inform the passengers about the arrival. 
   The command to open/close the doors is sent a little time after the stop and a little time before the departure. While the doors are opening/closing, 
   a warning sound must be played.
   Emergency situation:
     COMFORT should listen to both emergency interrupt lines. If one of them goes high, emergency situation = true. 
*/
void send_comfort_arrival() {
  Wire.beginTransmission(COMFORT_ADRESS); 
  const char message[] = {2}; 
  Wire.write(message, 1);
  Wire.endTransmission();
  }
  
void send_comfort_open_doors() {
  Wire.beginTransmission(COMFORT_ADRESS);
  const char message[] = {1};
  Wire.write(message, 1);
  Wire.endTransmission();
  }

void send_comfort_close_doors() {
  Wire.beginTransmission(COMFORT_ADRESS);
  const char message[] = {0};
  Wire.write(message, 1);
  Wire.endTransmission();
  }
  
